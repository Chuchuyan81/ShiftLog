const { test, expect } = require('@playwright/test');
const { loginUser } = require('./helpers/auth');
const { addVenue, addProduct, addShift, waitForModalOpen, waitForModalClose, closeModalByX } = require('./helpers/modals');

test.describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ —Å–º–µ–Ω', () => {
  
  let testVenueId;
  let testProducts = [];

  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    await loginUser(page);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await setupTestData(page);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∂—É—Ä–Ω–∞–ª—É —Å–º–µ–Ω
    await page.click('[data-screen="shifts"]');
    await page.waitForSelector('#shifts-screen', { state: 'visible' });
    await expect(page.locator('#shifts-screen')).toBeVisible();
  });

  async function setupTestData(page) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await page.click('[data-screen="settings"]');
    await page.waitForSelector('#settings-screen', { state: 'visible' });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
    const testVenue = {
      name: '–¢–µ—Å—Ç–æ–≤–æ–µ –ó–∞–≤–µ–¥–µ–Ω–∏–µ',
      address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1'
    };
    
    await addVenue(page, testVenue);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    const products = [
      {
        name: '–ö–æ—Ñ–µ',
        price: 150,
        commissionType: 'fixed',
        commissionValue: 25
      },
      {
        name: '–î–µ—Å–µ—Ä—Ç',
        price: 300,
        commissionType: 'percent',
        commissionValue: 15
      }
    ];
    
    for (const product of products) {
      await addProduct(page, product);
      testProducts.push(product);
    }
    
    // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await page.waitForTimeout(1000);
  }

  test.describe('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω', () => {
    
    test('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã');
      
      const currentDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
      
      const shiftData = {
        date: currentDate,
        isWorkday: true,
        fixedPayout: 1000,
        tips: 500,
        products: [
          { quantity: 10 }, // –ö–æ—Ñ–µ
          { quantity: 5 }   // –î–µ—Å–µ—Ä—Ç
        ]
      };
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É
      await page.fill('#shift-date', shiftData.date);
      
      // –í—ã–±–∏—Ä–∞–µ–º "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å"
      await page.check('input[name="workday"][value="work"]');
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      await page.waitForSelector('#shift-venue', { state: 'visible' });
      
      // –í—ã–±–∏—Ä–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ)
      const venueOptions = await page.locator('#shift-venue option:not([value=""])').all();
      if (venueOptions.length > 0) {
        const firstVenueValue = await venueOptions[0].getAttribute('value');
        await page.selectOption('#shift-venue', firstVenueValue);
      }
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –∏ —á–∞–π
      await page.fill('#shift-payout', shiftData.fixedPayout.toString());
      await page.fill('#shift-tips', shiftData.tips.toString());
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
      const productOptions = await page.locator('#products-container select option:not([value=""])').all();
      
      if (productOptions.length >= 2) {
        // –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞)
        await page.selectOption('#products-container select', await productOptions[0].getAttribute('value'));
        await page.fill('#products-container input[type="number"]', shiftData.products[0].quantity.toString());
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
        await page.click('#products-container .btn-secondary');
        await page.waitForTimeout(500);
        
        const productGroups = page.locator('.product-group');
        const secondGroup = productGroups.nth(1);
        await secondGroup.locator('select').selectOption(await productOptions[1].getAttribute('value'));
        await secondGroup.locator('input[type="number"]').fill(shiftData.products[1].quantity.toString());
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
      await page.waitForTimeout(1000);
      
      const totalRevenue = page.locator('#total-revenue');
      const totalEarnings = page.locator('#total-earnings');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Ç–æ–≥–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å (–Ω–µ —Ä–∞–≤–Ω—ã 0)
      if (await totalRevenue.isVisible()) {
        const revenueText = await totalRevenue.textContent();
        expect(revenueText).not.toBe('0 ‚ÇΩ');
      }
      
      if (await totalEarnings.isVisible()) {
        const earningsText = await totalEarnings.textContent();
        expect(earningsText).not.toBe('0 ‚ÇΩ');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É
      await page.click('#shift-form button[type="submit"]');
      await waitForModalClose(page, 'shift-modal');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ
      await page.waitForTimeout(2000);
      const shiftsTable = page.locator('#shifts-list');
      await expect(shiftsTable.locator(`text=${currentDate.split('-').reverse().join('.')}`)).toBeVisible();
    });

    test('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è');
      
      const currentDate = new Date();
      currentDate.setDate(currentDate.getDate() + 1); // –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
      const dateString = currentDate.toISOString().split('T')[0];
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É
      await page.fill('#shift-date', dateString);
      
      // –í—ã–±–∏—Ä–∞–µ–º "–í—ã—Ö–æ–¥–Ω–æ–π"
      await page.check('input[name="workday"][value="off"]');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —Å–∫—Ä—ã—Ç—ã
      await expect(page.locator('#shift-venue')).toBeHidden();
      await expect(page.locator('#shift-payout')).toBeHidden();
      await expect(page.locator('#shift-tips')).toBeHidden();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      await page.click('#shift-form button[type="submit"]');
      await waitForModalClose(page, 'shift-modal');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
      await page.waitForTimeout(2000);
      const shiftsTable = page.locator('#shifts-list');
      const dayOffRow = shiftsTable.locator(`text=${dateString.split('-').reverse().join('.')}`);
      await expect(dayOffRow).toBeVisible();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è "–í—ã—Ö–æ–¥–Ω–æ–π"
      await expect(shiftsTable.locator('text=–í—ã—Ö–æ–¥–Ω–æ–π')).toBeVisible();
    });

    test('–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –¥–∞—Ç—ã', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å–º–µ–Ω—ã');
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –¥–∞—Ç—ã
      await page.click('#shift-form button[type="submit"]');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—é
      await expect(page.locator('#shift-date')).toHaveAttribute('required');
      
      // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º
      await expect(page.locator('#shift-modal')).toBeVisible();
      
      await closeModalByX(page, 'shift-modal');
    });

    test('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º –¥–Ω–µ–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–Ω—è');
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
      await expect(page.locator('input[name="workday"][value="work"]')).toBeChecked();
      await expect(page.locator('#shift-venue')).toBeVisible();
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π
      await page.check('input[name="workday"][value="off"]');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π
      await expect(page.locator('#shift-venue')).toBeHidden();
      await expect(page.locator('#shift-payout')).toBeHidden();
      await expect(page.locator('#shift-tips')).toBeHidden();
      
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
      await page.check('input[name="workday"][value="work"]');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
      await expect(page.locator('#shift-venue')).toBeVisible();
      await expect(page.locator('#shift-payout')).toBeVisible();
      await expect(page.locator('#shift-tips')).toBeVisible();
      
      await closeModalByX(page, 'shift-modal');
    });
  });

  test.describe('–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º', () => {
    
    test('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      const currentMonthText = await page.locator('#current-month').textContent();
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
      await page.click('#prev-month');
      await page.waitForTimeout(1000);
      
      const prevMonthText = await page.locator('#current-month').textContent();
      expect(prevMonthText).not.toBe(currentMonthText);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è)
      await page.click('#next-month');
      await page.waitForTimeout(1000);
      
      const nextMonthText = await page.locator('#current-month').textContent();
      expect(nextMonthText).toBe(currentMonthText);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ –æ–¥–∏–Ω –∫–ª–∏–∫ –≤–ø–µ—Ä–µ–¥
      await page.click('#next-month');
      await page.waitForTimeout(1000);
      
      const futureMonthText = await page.locator('#current-month').textContent();
      expect(futureMonthText).not.toBe(currentMonthText);
    });

    test('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –ü—É—Å—Ç–æ–π –º–µ—Å—è—Ü');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–µ, –≥–¥–µ —Ç–æ—á–Ω–æ –Ω–µ—Ç —Å–º–µ–Ω
      for (let i = 0; i < 6; i++) {
        await page.click('#next-month');
        await page.waitForTimeout(300);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const shiftsTable = page.locator('#shifts-list');
      const tableContent = await shiftsTable.textContent();
      
      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç–æ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–º–µ–Ω
      if (tableContent.trim() === '' || tableContent.includes('–ù–µ—Ç —Å–º–µ–Ω') || tableContent.includes('—Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')) {
        // –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
        console.log('‚úÖ –ü—É—Å—Ç–æ–π –º–µ—Å—è—Ü –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    });
  });

  test.describe('–†–∞—Å—á–µ—Ç—ã –∏ —Ñ–æ—Ä–º—É–ª—ã', () => {
    
    test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Ä—É—á–∫–∏', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏');
      
      const currentDate = new Date().toISOString().split('T')[0];
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      await page.fill('#shift-date', currentDate);
      await page.check('input[name="workday"][value="work"]');
      
      // –í—ã–±–∏—Ä–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ
      const venueOptions = await page.locator('#shift-venue option:not([value=""])').all();
      if (venueOptions.length > 0) {
        await page.selectOption('#shift-venue', await venueOptions[0].getAttribute('value'));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const productOptions = await page.locator('#products-container select option:not([value=""])').all();
      
      if (productOptions.length >= 1) {
        // –î–æ–±–∞–≤–ª—è–µ–º 5 –∫–æ—Ñ–µ –ø–æ 150‚ÇΩ = 750‚ÇΩ
        await page.selectOption('#products-container select', await productOptions[0].getAttribute('value'));
        await page.fill('#products-container input[type="number"]', '5');
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        await page.waitForTimeout(1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏
        const totalRevenue = page.locator('#total-revenue');
        if (await totalRevenue.isVisible()) {
          const revenueText = await totalRevenue.textContent();
          // –û–∂–∏–¥–∞–µ–º 750‚ÇΩ (5 * 150)
          expect(revenueText).toContain('750');
        }
      }
      
      await closeModalByX(page, 'shift-modal');
    });

    test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞');
      
      const currentDate = new Date().toISOString().split('T')[0];
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      await page.fill('#shift-date', currentDate);
      await page.check('input[name="workday"][value="work"]');
      
      // –í—ã–±–∏—Ä–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ
      const venueOptions = await page.locator('#shift-venue option:not([value=""])').all();
      if (venueOptions.length > 0) {
        await page.selectOption('#shift-venue', await venueOptions[0].getAttribute('value'));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –∏ —á–∞–π
      await page.fill('#shift-payout', '1000');
      await page.fill('#shift-tips', '500');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π
      const productOptions = await page.locator('#products-container select option:not([value=""])').all();
      
      if (productOptions.length >= 1) {
        // 4 –∫–æ—Ñ–µ –ø–æ 25‚ÇΩ –∫–æ–º–∏—Å—Å–∏–∏ = 100‚ÇΩ
        await page.selectOption('#products-container select', await productOptions[0].getAttribute('value'));
        await page.fill('#products-container input[type="number"]', '4');
        
        await page.waitForTimeout(1000);
        
        // –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 100 (–∫–æ–º–∏—Å—Å–∏—è) + 1000 (–≤—ã—Ö–æ–¥) + 500 (—á–∞–π) = 1600‚ÇΩ
        const totalEarnings = page.locator('#total-earnings');
        if (await totalEarnings.isVisible()) {
          const earningsText = await totalEarnings.textContent();
          expect(earningsText).toContain('1600');
        }
      }
      
      await closeModalByX(page, 'shift-modal');
    });

    test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –†–∞—Å—á–µ—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π');
      
      const currentDate = new Date().toISOString().split('T')[0];
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      await page.fill('#shift-date', currentDate);
      await page.check('input[name="workday"][value="work"]');
      
      const venueOptions = await page.locator('#shift-venue option:not([value=""])').all();
      if (venueOptions.length > 0) {
        await page.selectOption('#shift-venue', await venueOptions[0].getAttribute('value'));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π (–î–µ—Å–µ—Ä—Ç)
      const productOptions = await page.locator('#products-container select option:not([value=""])').all();
      
      if (productOptions.length >= 2) {
        // 2 –¥–µ—Å–µ—Ä—Ç–∞ –ø–æ 300‚ÇΩ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 15% = 2 * 300 * 0.15 = 90‚ÇΩ
        await page.selectOption('#products-container select', await productOptions[1].getAttribute('value'));
        await page.fill('#products-container input[type="number"]', '2');
        
        await page.waitForTimeout(1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
        const totalEarnings = page.locator('#total-earnings');
        if (await totalEarnings.isVisible()) {
          const earningsText = await totalEarnings.textContent();
          expect(earningsText).toContain('90');
        }
      }
      
      await closeModalByX(page, 'shift-modal');
    });
  });

  test.describe('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω', () => {
    
    test('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ–Ω—ã', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã');
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ–Ω—É
      const currentDate = new Date().toISOString().split('T')[0];
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      await page.fill('#shift-date', currentDate);
      await page.check('input[name="workday"][value="work"]');
      
      const venueOptions = await page.locator('#shift-venue option:not([value=""])').all();
      if (venueOptions.length > 0) {
        await page.selectOption('#shift-venue', await venueOptions[0].getAttribute('value'));
      }
      
      await page.fill('#shift-payout', '800');
      
      await page.click('#shift-form button[type="submit"]');
      await waitForModalClose(page, 'shift-modal');
      await page.waitForTimeout(2000);
      
      // –¢–µ–ø–µ—Ä—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É - –∫–ª–∏–∫–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
      const dateFormatted = currentDate.split('-').reverse().join('.');
      const shiftRow = page.locator('#shifts-list').locator(`text=${dateFormatted}`).first();
      await shiftRow.click();
      
      await waitForModalOpen(page, 'shift-modal');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await expect(page.locator('#shift-date')).toHaveValue(currentDate);
      await expect(page.locator('#shift-payout')).toHaveValue('800');
      
      // –ò–∑–º–µ–Ω—è–µ–º –≤—ã—Ö–æ–¥
      await page.fill('#shift-payout', '1200');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await page.click('#shift-form button[type="submit"]');
      await waitForModalClose(page, 'shift-modal');
      
      await page.waitForTimeout(2000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
      // (–º–æ–∂–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É —Å–Ω–æ–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è)
      await shiftRow.click();
      await waitForModalOpen(page, 'shift-modal');
      await expect(page.locator('#shift-payout')).toHaveValue('1200');
      
      await closeModalByX(page, 'shift-modal');
    });

    test('–£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã', async ({ page }) => {
      console.log('üß™ –¢–µ—Å—Ç: –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const currentDate = new Date().toISOString().split('T')[0];
      
      await page.click('#add-shift-btn');
      await waitForModalOpen(page, 'shift-modal');
      
      await page.fill('#shift-date', currentDate);
      await page.check('input[name="workday"][value="off"]'); // –≤—ã—Ö–æ–¥–Ω–æ–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
      
      await page.click('#shift-form button[type="submit"]');
      await waitForModalClose(page, 'shift-modal');
      await page.waitForTimeout(2000);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–º–µ–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const dateFormatted = currentDate.split('-').reverse().join('.');
      const shiftRow = page.locator('#shifts-list').locator(`text=${dateFormatted}`).first();
      await shiftRow.click();
      
      await waitForModalOpen(page, 'shift-modal');
      
      // –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
      const deleteButton = page.locator('#shift-modal').locator('button:has-text("–£–¥–∞–ª–∏—Ç—å"), .btn-danger');
      if (await deleteButton.isVisible()) {
        await deleteButton.click();
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ª–æ–≥
        const confirmDialog = page.locator('.modal, .dialog');
        if (await confirmDialog.isVisible()) {
          await page.click('button:has-text("–£–¥–∞–ª–∏—Ç—å"), button:has-text("–î–∞"), button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")');
        }
        
        await page.waitForTimeout(2000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ–Ω–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const shiftsTable = page.locator('#shifts-list');
        await expect(shiftsTable.locator(`text=${dateFormatted}`)).not.toBeVisible();
      }
    });
  });
});