Отлично! Вот полный текст Технического Задания, включающий все ранее внесенные исправления, делающие приложение универсальным для любых работников сферы обслуживания.

Техническое Задание на разработку мобильного веб-приложения "Журнал Рабочих Смен"
Версия: 1.1
Дата: 24 мая 2024
[Ваше имя/Название команды]Автор:

1. Общие положения
1.1. Наименование проекта: Мобильное веб-приложение "Журнал Рабочих Смен" (альтернативное название: "ServicePro Log")
Автоматизация учета и анализа финансовой деятельности 1.2. Цель проекта:работников сферы обслуживания, включая учет проданных позиций/оказанных услуг, расчет выручки для заведения, собственного заработка и чаевых. Предоставление удобного инструмента для ежедневного ввода данных и получения сводной отчетности.
1.3. Целевая аудитория: Работники сферы обслуживания (например, кальянщики, бармены, официанты, продавцы, парикмахеры, мастера маникюра, курьеры и т.д.), работающие с фиксированной ставкой за выход, процентом от продаж/услуг и/или получающие чаевые.

* HTML5, CSS3, JavaScript (Vanilla JS или легковесный фреймворк/библиотека по согласованию, например, Vue.js/Svelte для SPA-функционала).1.4. Используемые технологии:Фронтенд:
* Бэкенд, База данных, Аутентификация, API: Supabase (PostgreSQL, Supabase Auth, Supabase PostgREST, Supabase Realtime).
* Хостинг фронтенда: Vercel, Netlify или аналогичный.
2. Функциональные требования
2.1. Аутентификация и Управление Пользователями
* Регистрация:
o Пользователь должен иметь возможность зарегистрироваться, используя email и пароль.
o Подтверждение email (через Supabase Auth).
* Авторизация:
o Вход в систему с использованием email и пароля.
o "Запомнить меня" (опционально, через токены сессии Supabase).
* Восстановление пароля:
o Функционал для сброса забытого пароля через email.
* Выход из системы:
o Возможность безопасного выхода из учетной записи.
* Управление профилем (базовое):
o Изменение пароля.
2.2. Управление данными о сменах (Журнал смен)
* Отображение:
o Основной экран должен представлять собой таблицу (или список элементов, стилизованных под таблицу) с записями смен.
o По умолчанию отображается текущий месяц.
o Возможность навигации по месяцам (кнопки "Предыдущий месяц", "Следующий месяц").
o Столбцы: "День недели", "Дата", "Заведение", "Статус", , "Выручка", "Выход", "Чай", "Заработок".[Пользовательские_позиции_продаж/услуг]
* Добавление новой записи:
o Кнопка/элемент "+" или "Добавить смену".
o Открытие формы для ввода данных:
* Дата: Выбор из календаря (по умолчанию – текущая дата).
* Статус дня: Переключатель (Radio Button/Toggle) "Рабочий день" / "Выходной".
* Если "Выходной": остальные поля ввода скрываются или становятся неактивными, значения обнуляются.
* Если "Рабочий день": отображаются все поля для ввода данных о смене.
* Заведение: Выпадающий список, содержащий названия заведений, настроенных пользователем.
* Позиции продаж/Услуги: Динамически генерируемые поля для ввода количества (числовое, целое) для каждой активной пользовательской категории (например, "Чаша", "Стрижка", "Коктейль" и т.д.).
* Выход (фиксированная ставка): Числовое поле, автоматически заполняется значением по умолчанию из настроек выбранного заведения (с возможностью ручного изменения для конкретной смены).
* Чай (Чаевые): Числовое поле.
* Выручка (для заведения): Поле только для чтения, рассчитывается автоматически при вводе данных о проданных позициях/оказанных услугах.
* Заработок (для сотрудника): Поле только для чтения, рассчитывается автоматически при вводе данных.
o Кнопка "Сохранить" для записи данных.
* Редактирование существующей записи:
o Нажатие на строку записи в таблице открывает форму редактирования с предзаполненными данными.
o Возможность изменить любые введенные данные.
o Автоматический перерасчет "Выручки" и "Заработка" при изменении данных.
o Кнопка "Сохранить изменения".
* Удаление записи:
o Возможность удалить запись о смене (например, по свайпу, долгому нажатию или кнопке "Удалить" в форме редактирования).
o Подтверждение удаления.
2.3. Настройки и справочники
* Управление Заведениями:
o Экран со списком добавленных заведений.
o Кнопка "Добавить заведение": форма с полями "Название заведения" (текст) и "Ставка за выход по умолчанию" (число).
o Для каждого заведения в списке: кнопки "Редактировать" и "Удалить".
* Управление Продаваемыми Позициями / Услугами:
o Экран со списком добавленных категорий (например, "Чаша", "Стрижка", "Коктейль").
o Кнопка "Добавить позицию/услугу": форма с полями:
* "Название позиции/услуги" (текст, например, "Кальян на Чаше", "Мужская стрижка", "Латте").
* "Цена заведения за единицу" (число, для расчета выручки заведения).
* "Метод расчета комиссии сотрудника": Выпадающий список/переключатель: "Фиксированная сумма за единицу" / "Процент от цены заведения".
* "Значение комиссии": Числовое поле, зависит от выбранного метода (сумма или процент).
o Для каждой категории в списке: кнопки "Редактировать" и "Удалить".
* Примечание: При удалении категории, приложение должно предупредить о возможных последствиях для старых записей.
* Настройка Валюты:
o Выбор символа валюты (например, "?", "$", "€", "p.").
o По умолчанию: "p.".
2.4. Расчеты
* Выручка за смену (для заведения):
o Формула: SUM (Количество_позиции * Цена_заведения_за_единицу_позиции_по_категории)
* Заработок за смену (для сотрудника):
o Формула: SUM (Количество_позиции * Комиссия_за_единицу_позиции_по_категории) + Фиксированная_ставка_за_выход + Чаевые
o Где рассчитывается как:Комиссия_за_единицу_позиции_по_категории
* Если "Фиксированная сумма": Значение_комиссии
* Если "Процент от цены заведения": Цена_заведения_за_единицу_позиции_по_категории * (Значение_комиссии / 100)
* Итоги за период (Месяц/Год):
o Общее количество проданных позиций/оказанных услуг: Отдельно для каждой пользовательской категории.
o Общая Выручка за период: Сумма всех "Выручек" за выбранный период.
o Общий Выход за период: Сумма всех "Выходов" за выбранный период.
o Общий Чай за период: Сумма всех "Чаевых" за выбранный период.
o Общий Заработок за период (Гросс): Сумма всех "Заработков" за выбранный период.
o Премия: Поле для ручного ввода суммы премии.
o Чистый Заработок (Нетто): Общий Заработок (Гросс) + Премия.
o Дата получения: Поле для ввода даты, когда ожидаются выплаты (текст или дата).
o Итого по категориям выручки (за период): SUM (Количество_позиции * Цена_заведения_за_единицу_позиции) для каждой категории за период.
o Все расчеты должны выполняться динамически при изменении данных и по запросу для сводных отчетов.
2.5. Отчетность и Аналитика
* Экран "Итоги" / "Отчеты":
o Отображение всех суммарных показателей за выбранный месяц (как в нижней части предоставленной таблицы).
o Возможность выбора месяца/года для просмотра итогов.
o Возможность ввода/редактирования поля "Премия" и "Дата получения" для текущего/выбранного месяца.
* Экспорт данных:
o Кнопка "Экспорт в CSV/Excel" для выбранного периода (например, месяц или все данные).
o Экспортируемые данные должны включать все поля журнала смен и, опционально, сводные итоги.
3. Нефункциональные требования
3.1. Производительность:
* Время загрузки страниц: не более 3 секунд на стабильном мобильном интернет-соединении.
* Отклик интерфейса на действия пользователя: мгновенный (менее 0.5 секунды).
* Скорость расчетов: мгновенная при вводе данных, агрегированные отчеты - не более 2 секунд для месяца.
3.2. Безопасность:
* Аутентификация: Использование стандартных механизмов безопасности Supabase Auth (JWT токены, защита от брутфорса).
* Авторизация (RLS - Row Level Security): Каждая запись данных (смены, заведения, категории позиций/услуг) должна быть строго привязана к . Пользователь должен иметь доступ только к своим данным.user_id
o Настроить RLS политики для таблиц , , , .shiftsvenuesuser_productsshift_products
* Защита API: Использование Supabase API ключей. Публичный ключ должен использоваться только для клиентских запросов.
* Защита данных: Использование HTTPS для всех сетевых взаимодействий.
* Валидация ввода: Все пользовательские данные должны быть валидированы на стороне клиента и сервера (через Supabase RLS/PostgreSQL constraints) для предотвращения некорректных значений.
3.3. Удобство использования (UX/UI):
* Мобильный First Design: Интерфейс должен быть адаптирован для использования на мобильных устройствах (смартфоны, планшеты) с использованием принципов адаптивного дизайна (responsive design).
* Интуитивность: Простой и понятный интерфейс, минимизирующий количество шагов для выполнения основных операций.
* Визуальное оформление: Чистый, современный дизайн. Использование иконок для наглядности.
* Обратная связь: Четкие сообщения об ошибках, подтверждения операций (успех/неудача).
* Ввод данных: Удобные элементы для ввода чисел и выбора даты/времени. Использование числовой клавиатуры для соответствующих полей.
3.4. Совместимость:
* Совместимость с последними версиями популярных мобильных браузеров (Chrome, Safari, Firefox).
3.5. Сопровождение и Поддержка:
* Код должен быть хорошо структурирован, комментирован и соответствовать стандартам кодирования для облегчения дальнейшей поддержки и развития.
* Система должна быть легко разворачиваемой и масштабируемой средствами Supabase.
4. Архитектура приложения
4.1. Общая схема:
Сгенерированный код
      +-------------------+       +--------------------+       +---------------------+
| Пользователь      | <---> | Frontend (HTML/CSS/JS) | <---> | Supabase Backend      |
| (Мобильный браузер)|       | PWA / Responsive Web |       | (PostgreSQL, Auth,  |
+-------------------+       +--------------------+       | PostgREST, RLS)     |
                                                         +---------------------+
    
4.2. Фронтенд (Клиентская сторона):
* HTML: Структура страниц, формы, таблицы.
* ЦСС: Стилизация, адаптивный дизайн (CSS Grid/Flexbox, медиа-запросы).
* Код JavaScript:
o Взаимодействие с DOM для отображения и обработки ввода.
o Работа с Supabase Client SDK для выполнения CRUD-операций и аутентификации.
o Реализация всей логики расчетов на стороне клиента (для мгновенной обратной связи).
o Обработка пользовательских событий (клики, ввод, сабмиты форм).
o Управление состоянием приложения (стейт-менеджмент).
o Маршрутизация (для Single Page Application).
4.3. Бэкенд (Supabase):
* База данных PostgreSQL: Хранение всех данных.
* Supabase Auth: Управление пользователями, аутентификация.
* Supabase PostgREST: Автоматически сгенерированный RESTful API для взаимодействия с базой данных.
* Безопасность на уровне строк (RLS): Вся логика доступа к данным на уровне строк будет реализована через RLS-политики SQL.
5. Структура базы данных (Supabase PostgreSQL)
5.1. Таблица (управляется Supabase Auth):Пользователей
* идентификатор (uuid, PK)
* Отправить по электронной почте (текст)
* created_at (временная метка с часовым поясом)
* ... (другие поля, создаваемые Supabase Auth)
5.2. Таблица (Заведения):Места
* идентификатор (uuid, PK, по умолчанию: 'gen_gen_random_uuid())
* user_id (uuid, FK to , НЕ NULL)users.id
* имя (текст, НЕ NULL)
* default_fixed_payout (числовое, по умолчанию: 0)
* created_at (временная метка с часовым поясом, deсейчас())
* RLS-политики: Пользователь может видеть, создавать, обновлять и удалять только свои заведения.
5.3. Таблица (пользовательские позиции/услуги):user_products
* идентификатор (uuid, PK, по умолчанию: gen_random_uuid())
* user_id (uuid, FK to , НЕ NULL)users.id
* имя (text, NOT NULL, UNIQUE для ) - user_idНазвание позиции/услуги (Например, 'Кальян на Чаше', 'Стрижка', 'Латте').
* price_per_unit (числовое, НЕ NULL, по умолчанию: 0) - Цена заведения за единицу.
* commission_type (text, NOT NULL, перечисление: 'fixed', 'percentage
* commission_value (числовое, НЕ NULL, по умолчанию: 0)
* created_at (Временная метка с часовым поясом, по умолчанию: сейчас())
* RLS-политики: Пользователь может видеть, создавать, обновлять и удалять только свои категории позиций/услуг.
5.4. Таблица (Смены):Смены
* идентификатор (uuid, PK, по умолчанию: gen_random_uuid())
* user_id (uuid, FK to , НЕ NULL)users.id
* shift_date (date, NOT NULL, UNIQUE для и user_idvenue_id) - Одна смена в одном заведении в день.
* venue_id (uuid, FK to , НЕ NULL)venues.id
* is_workday (булево, НЕ
* fixed_payout (числовое, НЕ NULL, по умолчанию: 0)
* Советы (числовое, НЕ NULL, по умолчанию: 0)
* revenue_generated (числовое, НЕ NULL, по умолчанию: 0) - *Расчетное полеРасчетное поле, хранится.
* заработок (числовое, НЕ NULL, по умолчанию: 0) - Расчетное поле, хранится.
* created_at (Временная метка с часовым поясом, по умолчанию: сейчас())
* updated_at (Временная метка с часовым поясом, по умолчанию: сейчас()) - Trigger для обновления.
* RLS-политики: Пользователь может видеть, создавать, обновлять и удалять только свои смены.
5.5. Таблица (Продажи позиций/услуг за смену - связующая таблица):shift_products
* идентификатор (uuid, PK, по умолчанию: gen_random_uuid())
* shift_id (uuid, FK to , НЕ NULL)shifts.id
* product_id (uuid, FK to 'us, NOT NULL) - user_products.idТеперь ссылается на пользовательские продукты/услуги.
* количество (целое число, НЕ NULL, по умолчанию: 0)
* price_snapshot (числовое, НЕ NULL) - *Цена продуктЦена продукта в момент продажи, для корректного перерасчета, если цены продуктов изменятся.
* commission_snapshot (числовое, NOT NULL) - *Комиссия продукта в момент продажи, для корректного перерКомиссия продукта в момент продажи, для корректного перерасчета.
* created_at (Временная метка с часовым поясом, по умолчанию: сейчас())
* RLS-политики: Пользователь может видеть, создавать, обновлять и удалять записи только тех , которые относятся к его сменам (shift_productsshift_id связан с через ).user_idСмены
6. Взаимодействие API (Supabase Client SDK)
Фронтенд будет использовать Supabase JavaScript Client SDK для всех операций:
* Аутентификация:
o supabase.auth.signUp({ электронная почта, пароль })
o supabase.auth.signInWithPassword({ электронная почта, пароль })
o supabase.auth.signOut()
o supabase.auth.resetPasswordForEmail(электронная почта)
o supabase.auth.getSession() / supabase.auth.onAuthStateChange()
* CRUD для :Места
o supabase.from('venues').select('*').eq('user_id', currentUserId)
o supabase.from('venues').insert({ ... })
o supabase.from('venues').update({ ... }). eq('id', venueId)
o supabase.from('venues').delete().eq('id', venueId)
* CRUD для :user_products
o supabase.from('user_products').select('*').eq('user_id', currentUserId)
o supabase.from('user_products').insert({ ... })
o supabase.from('user_products').update({ ... }). eq('id', productId)
o supabase.from('user_products').delete().eq('id', productId)
* CRUD для :Смены
o supabase.from('shifts').select(*, venues(name), shift_products(product_id, quantity, user_products(name))').eq('user_id', cur - для получения данных для журнала смен.).eq('user_id', currentUserId).filter('shift_date', 'gte', startOfMonth).filter('shift_date', 'lte', endOfMonth)
o supabase.from('shifts').insert({ ... }). select('id') - вставка смены.
o После вставки смены, вставка : 'supabase.from('shift_products').insert([{ shift_id, product_id, quantity, price_snashift_productssupabase.from('shift_products').insert([{ shift_id, product_id, количество, price_snapshot, commission_snapshot }, ...])
o supabase.from('shifts').update({ ... }). eq('id', shiftId)
o supabase.from('shift_products').delete().eq('shift_id', shiftId) - перед обновлением для смены.shift_products
o supabase.from('shifts').delete().eq('id', shiftId)
* Агрегированные запросы для отчетов:
o supabase.from('shifts').select('*, shift_products(quantity, user_products(price_per_unit, commission_type, commission_value))') .filter('shift_date', 'gte', startPeriod).filter('shift_date', 'lte', endPeriod) - получение данных для клиентского агрегирования.
o Опционально: Использование PostgreSQL или в Supabase для более сложных агрегаций на стороне БД, если клиентские расчеты станут слишком медленными.ВИДФункция SQL
7. Пользовательский интерфейс (UI/UX) - описание
7.1. Общие элементы:
* Единый хедер с названием приложения и кнопками навигации.
* Футер или боковое меню для навигации между основными разделами: "Журнал", "Настройки", "Итоги".
* Использование стилей и компонент, адаптированных для мобильных экранов.
7.2. Экран "Вход / Регистрация":
* Две формы (или переключаемые вкладки) для входа и регистрации.
* Поля: Email, Пароль, Подтверждение пароля (для регистрации).
* Кнопки: "Войти", "Зарегистрироваться", "Забыли пароль?".
7.3. Экран "Журнал" (Основной экран):
* Верхняя часть: Название текущего месяца и года, кнопки-стрелки для перехода к предыдущему/следующему месяцу.
* Центральная часть: Таблица с записями смен.
o Каждая строка – отдельный день.
o Стилизация строк: "Рабочий день" (обычный фон), "Выходной" (серый фон).
o Возможность скроллинга по датам.
* Нижняя часть: Большая плавающая кнопка "+" для добавления новой смены.
* Форма добавления/редактирования смены (модальное окно или отдельная страница):
o Элемент выбора даты.
o Переключатель "Рабочий день / Выходной".
o Выпадающий список для "Заведения".
o Динамически генерируемые поля 'input type="numbe для количества каждого типа .input type="число"пользовательской позиции/услуги
o Поля для "Выход" и "Чай".input type="число"
o Поля (только для чтения) для "Выручка" и "Заработок", обновляемые в реальном времени.input type="текст"
o Кнопки "Сохранить", "Отмена", "Удалить" (для режима редактирования).
7.4. Экран "Настройки":
* Список разделов настроек: "Заведения", , "Валюта"."Продаваемые Позиции / Услуги"
* "Заведения":
o Список заведений с кнопками "Редактировать" (иконка карандаша) и "Удалить" (иконка корзины) для каждого.
o Кнопка "Добавить заведение" вверху или внизу списка.
o Форма добавления/редактирования заведения (модальное окно).
* "Продаваемые Позиции / Услуги":
o Список позиций/услуг с кнопками "Редактировать" (иконка карандаша) и "Удалить" (иконка корзины) для каждой.
o Кнопка "Добавить позицию/услугу" вверху или внизу списка.
o Форма добавления/редактирования позиции/услуги (модальное окно).
* "Валюта":
o Выпадающий список или поле для ввода символа валюты.
7.5. Экран "Итоги":
* Верхняя часть: Выбор месяца/года для отчета.
* Центральная часть: Блоки с суммарными показателями:
o "Всего продано/оказано: X шт."[Название категории 1]
o "Всего продано/оказано: Y шт."[Название категории 2]
o ... (для всех пользовательских категорий).
o "Общая Выручка за период: Z p."
o "Общий Выход: A p."
o "Общий Чай: B p."
o "Общий Заработок (Гросс): C p."
o "Премия:" (поле ввода/редактирования).
o "Чистый Заработок: D p." (автоматический перерасчет при изменении премии).
o "Придет [Дата]:" (поле ввода/редактирования даты).
* "Итого по категориям выручки": Блок со списком "Название категории: X p.".
* Кнопка "Экспорт данных".
8. Развертывание (Deployment)
* Фронтенд: Развертывание статических HTML/CSS/JS файлов на хостинге, поддерживающем CI/CD и CDN (например, Vercel, Netlify, GitHub Pages). Приложение должно быть доступно по публичному URL.
* Бэкенд: Supabase Project (база данных PostgreSQL, Auth, PostgREST API) будет настроен и управляться через панель управления Supabase.
9. Тестирование
9.1. Виды тестирования:
* Модульное тестирование (Unit Testing): Тестирование отдельных функций JavaScript (например, функций расчета) и Supabase RLS-политик.
* Интеграционное тестирование: Проверка взаимодействия фронтенда с API Supabase.
* Пользовательское приемочное тестирование (UAT): Проверка соответствия приложения функциональным требованиям со стороны заказчика.
9.2. Тестовые сценарии (примеры):
* Регистрация нового пользователя и успешный вход.
* Добавление, редактирование и удаление заведения.
* Добавление, редактирование и удаление пользовательской позиции/услуги.
* Добавление новой смены (рабочий день) со всеми данными.
* Проверка автоматического расчета "Выручки" и "Заработка" при вводе данных.
* Переход в режим "Выходной" для смены и проверка обнуления полей.
* Редактирование существующей смены и проверка перерасчета.
* Просмотр итогов за текущий/предыдущий месяц.
* Изменение премии и проверка перерасчета "Чистого Заработка".
* Экспорт данных в CSV.
* Проверка доступа к данным: пользователь не должен видеть или изменять данные других пользователей.
* Проверка работы на разных мобильных устройствах/браузерах (адаптивность).
10. Будущие доработки (вне рамок текущего ТЗ)
* Визуализация данных: Графики динамики заработка, выручки, продаж по категориям.
* Уведомления/Напоминания о необходимости внести данные.
* Оффлайн-режим работы с синхронизацией при появлении сети.
* Разделение доступа/сотрудничество (если у сотрудника есть помощники).
* Импорт данных из CSV/Excel (более сложный функционал).
* Поддержка темной темы.


