/**
 * –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–ö–†–ò–ü–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ñ—É—Ä–Ω–∞–ª –†–∞–±–æ—á–∏—Ö –°–º–µ–Ω (ShiftLog)
 * 
 * –ó–∞–ø—É—Å–∫: –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –≤ index.html
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç: API, UI, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const TEST_CONFIG = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    SUPABASE_URL: 'https://ukuhwaulkvpqkwqbqqag.supabase.co',
    SUPABASE_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVrdWh3YXVsa3ZwcWt3cWJxcWFnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NDUzMDgsImV4cCI6MjA2NjQyMTMwOH0.dzSK4aP-QB8QjkZ_JrTc-DHEehLwce2Y2leK_VslBqY',
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    TEST_USER: {
        email: 'chuchuyan81@gmail.com',
        password: '123456'
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    TIMEOUT: 10000, // 10 —Å–µ–∫—É–Ω–¥
    RETRY_COUNT: 3,
    DELAY_BETWEEN_TESTS: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    
    // –§–ª–∞–≥–∏ —Ç–µ—Å—Ç–æ–≤
    RUN_SUPABASE_TESTS: true,
    RUN_UI_TESTS: true,
    RUN_BUSINESS_LOGIC_TESTS: true,
    RUN_INTEGRATION_TESTS: true,
    CLEANUP_AFTER_TESTS: true
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let testResults = {
    total: 0,
    passed: 0,
    failed: 0,
    errors: [],
    startTime: null,
    endTime: null
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
let testData = {
    userId: null,
    venueId: null,
    productId: null,
    shiftId: null,
    supabaseClient: null
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ShiftLog');
    console.log('='.repeat(60));
    
    testResults.startTime = new Date();
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
        await initializeTestEnvironment();
        
        // –ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–æ–≤
        if (TEST_CONFIG.RUN_SUPABASE_TESTS) {
            await runSupabaseTests();
        }
        
        if (TEST_CONFIG.RUN_UI_TESTS) {
            await runUITests();
        }
        
        if (TEST_CONFIG.RUN_BUSINESS_LOGIC_TESTS) {
            await runBusinessLogicTests();
        }
        
        if (TEST_CONFIG.RUN_INTEGRATION_TESTS) {
            await runIntegrationTests();
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        if (TEST_CONFIG.CLEANUP_AFTER_TESTS) {
            await cleanupTestData();
        }
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        testResults.errors.push({
            test: '–°–ò–°–¢–ï–ú–ê',
            error: error.message,
            stack: error.stack
        });
    } finally {
        // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        await generateTestReport();
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
 */
async function initializeTestEnvironment() {
    logTestSection('–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Supabase
    await testFunction('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Supabase', async () => {
        if (!window.supabase) {
            throw new Error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
        
        testData.supabaseClient = window.supabase.createClient(
            TEST_CONFIG.SUPABASE_URL, 
            TEST_CONFIG.SUPABASE_KEY
        );
        
        if (!testData.supabaseClient) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
        }
        
        return true;
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    await testFunction('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', async () => {
        const { data, error } = await testData.supabaseClient
            .from('venues')
            .select('count')
            .limit(1);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
        }
        
        return true;
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await testFunction('–ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤', async () => {
        const requiredElements = [
            'app', 'main-app', 'auth-screen', 'loading-screen',
            'shifts-screen', 'reports-screen', 'settings-screen'
        ];
        
        for (const elementId of requiredElements) {
            const element = document.getElementById(elementId);
            if (!element) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç ${elementId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM`);
            }
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Supabase
 */
async function runSupabaseTests() {
    logTestSection('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SUPABASE');
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await testSupabaseAuth();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
    await testSupabaseCRUD();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫
    await testSupabaseRLS();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
async function testSupabaseAuth() {
    logTestSubsection('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await testFunction('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
        const { data, error } = await testData.supabaseClient.auth.signUp({
            email: TEST_CONFIG.TEST_USER.email,
            password: TEST_CONFIG.TEST_USER.password
        });
        
        if (error && error.message !== 'User already registered') {
            throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
        
        return true;
    });
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await testFunction('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
        const { data, error } = await testData.supabaseClient.auth.signInWithPassword({
            email: TEST_CONFIG.TEST_USER.email,
            password: TEST_CONFIG.TEST_USER.password
        });
        
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
        
        if (!data.user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
        
        testData.userId = data.user.id;
        return true;
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    await testFunction('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏', async () => {
        const { data: { session } } = await testData.supabaseClient.auth.getSession();
        
        if (!session) {
            throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        if (session.user.id !== testData.userId) {
            throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
 */
async function testSupabaseCRUD() {
    logTestSubsection('CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    await testFunction('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è', async () => {
        const { data, error } = await testData.supabaseClient
            .from('venues')
            .insert({
                user_id: testData.userId,
                name: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ',
                default_fixed_payout: 1000
            })
            .select()
            .single();
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è: ${error.message}`);
        }
        
        testData.venueId = data.id;
        return true;
    });
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    await testFunction('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', async () => {
        const { data, error } = await testData.supabaseClient
            .from('user_products')
            .insert({
                user_id: testData.userId,
                name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
                price_per_unit: 100,
                commission_type: 'fixed',
                commission_value: 10
            })
            .select()
            .single();
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}`);
        }
        
        testData.productId = data.id;
        return true;
    });
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    await testFunction('–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã', async () => {
        const { data, error } = await testData.supabaseClient
            .from('shifts')
            .insert({
                user_id: testData.userId,
                venue_id: testData.venueId,
                shift_date: new Date().toISOString().split('T')[0],
                is_workday: true,
                fixed_payout: 1000,
                tips: 500,
                revenue_generated: 5000,
                earnings: 1500
            })
            .select()
            .single();
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã: ${error.message}`);
        }
        
        testData.shiftId = data.id;
        return true;
    });
    
    // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await testFunction('–ß—Ç–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π', async () => {
        const { data, error } = await testData.supabaseClient
            .from('venues')
            .select('*')
            .eq('user_id', testData.userId);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π: ${error.message}`);
        }
        
        if (data.length === 0) {
            throw new Error('–ó–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        return true;
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await testFunction('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è', async () => {
        const { error } = await testData.supabaseClient
            .from('venues')
            .update({ name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ' })
            .eq('id', testData.venueId);
            
        if (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è: ${error.message}`);
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫
 */
async function testSupabaseRLS() {
    logTestSubsection('RLS –ø–æ–ª–∏—Ç–∏–∫–∏');
    
    await testFunction('–ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const anonClient = window.supabase.createClient(
            TEST_CONFIG.SUPABASE_URL, 
            TEST_CONFIG.SUPABASE_KEY
        );
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const { data, error } = await anonClient
            .from('venues')
            .select('*');
            
        // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (data && data.length > 0) {
            throw new Error('RLS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
async function runUITests() {
    logTestSection('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI');
    
    await testUIElements();
    await testUIInteractions();
    await testUIResponsiveness();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
async function testUIElements() {
    logTestSubsection('–≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    
    await testFunction('–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', async () => {
        const navButtons = document.querySelectorAll('.nav-btn');
        if (navButtons.length === 0) {
            throw new Error('–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É
        navButtons.forEach((btn, index) => {
            if (!btn.dataset.screen) {
                throw new Error(`–ö–Ω–æ–ø–∫–∞ ${index} –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ data-screen`);
            }
        });
        
        return true;
    });
    
    await testFunction('–ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞', async () => {
        const modals = ['shift-modal', 'venue-modal', 'product-modal'];
        
        for (const modalId of modals) {
            const modal = document.getElementById(modalId);
            if (!modal) {
                console.warn(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ${modalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                continue;
            }
            
            if (!modal.classList.contains('modal')) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç ${modalId} –Ω–µ –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å–∞ modal`);
            }
        }
        
        return true;
    });
    
    await testFunction('–§–æ—Ä–º—ã', async () => {
        const forms = ['auth-form', 'shift-form'];
        
        for (const formId of forms) {
            const form = document.getElementById(formId);
            if (!form) {
                throw new Error(`–§–æ—Ä–º–∞ ${formId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
            
            if (form.tagName !== 'FORM') {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç ${formId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º–æ–π`);
            }
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π UI
 */
async function testUIInteractions() {
    logTestSubsection('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è UI');
    
    await testFunction('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤', async () => {
        const screens = ['shifts', 'reports', 'settings'];
        
        for (const screenName of screens) {
            const navBtn = document.querySelector(`[data-screen="${screenName}"]`);
            if (!navBtn) {
                throw new Error(`–ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è ${screenName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
            navBtn.click();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è
            const screen = document.getElementById(`${screenName}-screen`);
            if (!screen) {
                throw new Error(`–≠–∫—Ä–∞–Ω ${screenName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        return true;
    });
    
    await testFunction('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω', async () => {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã
        const addShiftBtn = document.getElementById('add-shift-btn');
        if (addShiftBtn) {
            addShiftBtn.click();
            
            const modal = document.getElementById('shift-modal');
            if (modal && modal.classList.contains('hidden')) {
                throw new Error('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å');
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const closeBtn = document.getElementById('close-shift-modal');
            if (closeBtn) {
                closeBtn.click();
            }
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function testUIResponsiveness() {
    logTestSubsection('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å');
    
    await testFunction('–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö', async () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
        const originalWidth = window.innerWidth;
        const originalHeight = window.innerHeight;
        
        try {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: 667
            });
            
            // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ resize
            window.dispatchEvent(new Event('resize'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å
            const app = document.getElementById('app');
            const computedStyle = window.getComputedStyle(app);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            if (computedStyle.width === '0px') {
                throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É');
            }
            
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: originalWidth
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: originalHeight
            });
            
            window.dispatchEvent(new Event('resize'));
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
 */
async function runBusinessLogicTests() {
    logTestSection('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò');
    
    await testCalculations();
    await testValidations();
    await testDataProcessing();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
 */
async function testCalculations() {
    logTestSubsection('–í—ã—á–∏—Å–ª–µ–Ω–∏—è');
    
    await testFunction('–†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏', async () => {
        const shiftProducts = [
            { product_id: 1, quantity: 10 },
            { product_id: 2, quantity: 5 }
        ];
        
        const products = [
            { id: 1, price_per_unit: 100 },
            { id: 2, price_per_unit: 200 }
        ];
        
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è calculateRevenue –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof calculateRevenue === 'function') {
            const revenue = calculateRevenue(shiftProducts, products);
            const expected = (10 * 100) + (5 * 200); // 2000
            
            if (revenue !== expected) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${revenue}`);
            }
        }
        
        return true;
    });
    
    await testFunction('–†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞', async () => {
        const shiftProducts = [
            { product_id: 1, quantity: 10 },
            { product_id: 2, quantity: 5 }
        ];
        
        const products = [
            { id: 1, price_per_unit: 100, commission_type: 'fixed', commission_value: 10 },
            { id: 2, price_per_unit: 200, commission_type: 'percentage', commission_value: 5 }
        ];
        
        const fixedPayout = 1000;
        const tips = 500;
        
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è calculateEarnings –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof calculateEarnings === 'function') {
            const earnings = calculateEarnings(shiftProducts, products, fixedPayout, tips);
            
            // –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—á–µ—Ç:
            // –ö–æ–º–∏—Å—Å–∏—è: (10 * 10) + (5 * 200 * 0.05) = 100 + 50 = 150
            // –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: 150 + 1000 + 500 = 1650
            const expected = 1650;
            
            if (earnings !== expected) {
                throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${earnings}`);
            }
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function testValidations() {
    logTestSubsection('–í–∞–ª–∏–¥–∞—Ü–∏—è');
    
    await testFunction('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã', async () => {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const testCases = [
            {
                data: { shift_date: '', fixed_payout: 100, tips: 50 },
                shouldPass: false,
                reason: '–ü—É—Å—Ç–∞—è –¥–∞—Ç–∞'
            },
            {
                data: { shift_date: '2024-01-01', fixed_payout: -100, tips: 50 },
                shouldPass: false,
                reason: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞'
            },
            {
                data: { shift_date: '2024-01-01', fixed_payout: 100, tips: -50 },
                shouldPass: false,
                reason: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∞–µ–≤—ã–µ'
            },
            {
                data: { shift_date: '2024-01-01', fixed_payout: 100, tips: 50 },
                shouldPass: true,
                reason: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            }
        ];
        
        for (const testCase of testCases) {
            if (typeof validateShiftData === 'function') {
                const result = validateShiftData(testCase.data);
                
                if (result !== testCase.shouldPass) {
                    throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –¥–ª—è —Å–ª—É—á–∞—è: ${testCase.reason}`);
                }
            }
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
async function testDataProcessing() {
    logTestSubsection('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    
    await testFunction('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã', async () => {
        if (typeof formatCurrency === 'function') {
            const testCases = [
                { input: 1000, expected: '1000 ‚ÇΩ' },
                { input: 1000.50, expected: '1000.5 ‚ÇΩ' },
                { input: 0, expected: '0 ‚ÇΩ' }
            ];
            
            for (const testCase of testCases) {
                const result = formatCurrency(testCase.input);
                if (!result.includes(testCase.input.toString())) {
                    throw new Error(`–ù–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testCase.input} -> ${result}`);
                }
            }
        }
        
        return true;
    });
}

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
 */
async function runIntegrationTests() {
    logTestSection('–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´');
    
    await testFullWorkflow();
    await testErrorHandling();
    await testPerformance();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
async function testFullWorkflow() {
    logTestSubsection('–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å');
    
    await testFunction('–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏', async () => {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å–º–µ–Ω—ã
        const { data: shiftProduct, error: shiftProductError } = await testData.supabaseClient
            .from('shift_products')
            .insert({
                shift_id: testData.shiftId,
                product_id: testData.productId,
                quantity: 5,
                price_snapshot: 100,
                commission_snapshot: 10
            })
            .select()
            .single();
            
        if (shiftProductError) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–º–µ–Ω—ã: ${shiftProductError.message}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
        const { data: shiftProducts, error: selectError } = await testData.supabaseClient
            .from('shift_products')
            .select('*')
            .eq('shift_id', testData.shiftId);
            
        if (selectError) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–º–µ–Ω—ã: ${selectError.message}`);
        }
        
        if (shiftProducts.length === 0) {
            throw new Error('–ü—Ä–æ–¥—É–∫—Ç—ã —Å–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        return true;
    });
    
    await testFunction('–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤ —Å–º–µ–Ω—ã', async () => {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        const { data: shift, error: shiftError } = await testData.supabaseClient
            .from('shifts')
            .select(`
                *,
                venue:venues(name),
                shift_products(
                    quantity,
                    price_snapshot,
                    commission_snapshot,
                    product:user_products(name)
                )
            `)
            .eq('id', testData.shiftId)
            .single();
            
        if (shiftError) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω—ã: ${shiftError.message}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (!shift.venue) {
            throw new Error('–î–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
        }
        
        if (!shift.shift_products || shift.shift_products.length === 0) {
            throw new Error('–ü—Ä–æ–¥—É–∫—Ç—ã —Å–º–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
async function testErrorHandling() {
    logTestSubsection('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    
    await testFunction('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫', async () => {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º URL
        const invalidClient = window.supabase.createClient(
            'https://invalid-url.supabase.co',
            TEST_CONFIG.SUPABASE_KEY
        );
        
        try {
            await invalidClient.from('venues').select('*');
            throw new Error('–û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        } catch (error) {
            // –û–∂–∏–¥–∞–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
            if (!error.message.includes('fetch') && !error.message.includes('network')) {
                console.warn('–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
            }
        }
        
        return true;
    });
    
    await testFunction('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', async () => {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
        try {
            await testData.supabaseClient
                .from('user_products')
                .insert({
                    user_id: testData.userId,
                    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç', // –≠—Ç–æ –∂–µ –∏–º—è —É–∂–µ –µ—Å—Ç—å
                    price_per_unit: 100,
                    commission_type: 'fixed',
                    commission_value: 10
                });
                
            throw new Error('–î—É–±–ª–∏–∫–∞—Ç –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        } catch (error) {
            // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É unique constraint
            if (!error.message.includes('unique') && !error.message.includes('duplicate')) {
                console.warn('–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
            }
        }
        
        return true;
    });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
async function testPerformance() {
    logTestSubsection('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    
    await testFunction('–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', async () => {
        const startTime = performance.now();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [venues, products, shifts] = await Promise.all([
            testData.supabaseClient.from('venues').select('*').eq('user_id', testData.userId),
            testData.supabaseClient.from('user_products').select('*').eq('user_id', testData.userId),
            testData.supabaseClient.from('shifts').select('*').eq('user_id', testData.userId)
        ]);
        
        const endTime = performance.now();
        const loadTime = endTime - startTime;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
        if (loadTime > 5000) {
            throw new Error(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ${loadTime}ms`);
        }
        
        console.log(`‚úÖ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${loadTime.toFixed(2)}ms`);
        return true;
    });
    
    await testFunction('–ü–∞–º—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', async () => {
        if (performance.memory) {
            const memoryInfo = performance.memory;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if (memoryInfo.usedJSHeapSize > 50 * 1024 * 1024) { // 50MB
                console.warn(`‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${(memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);
            }
            
            console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${(memoryInfo.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`);
        }
        
        return true;
    });
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function cleanupTestData() {
    logTestSection('–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
    
    try {
        // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º foreign keys)
        if (testData.shiftId) {
            await testData.supabaseClient
                .from('shift_products')
                .delete()
                .eq('shift_id', testData.shiftId);
                
            await testData.supabaseClient
                .from('shifts')
                .delete()
                .eq('id', testData.shiftId);
        }
        
        if (testData.productId) {
            await testData.supabaseClient
                .from('user_products')
                .delete()
                .eq('id', testData.productId);
        }
        
        if (testData.venueId) {
            await testData.supabaseClient
                .from('venues')
                .delete()
                .eq('id', testData.venueId);
        }
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
async function generateTestReport() {
    testResults.endTime = new Date();
    const duration = testResults.endTime - testResults.startTime;
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
    console.log('='.repeat(60));
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(duration / 1000).toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.total}`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${testResults.failed}`);
    console.log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((testResults.passed / testResults.total) * 100).toFixed(1)}%`);
    
    if (testResults.errors.length > 0) {
        console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
        testResults.errors.forEach((error, index) => {
            console.log(`${index + 1}. ${error.test}: ${error.error}`);
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ localStorage
    const report = {
        timestamp: testResults.endTime,
        duration: duration,
        total: testResults.total,
        passed: testResults.passed,
        failed: testResults.failed,
        errors: testResults.errors
    };
    
    localStorage.setItem('shiftlog_test_report', JSON.stringify(report));
    
    console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
    console.log('='.repeat(60));
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
 */
async function testFunction(name, testFn) {
    testResults.total++;
    
    try {
        console.log(`üß™ ${name}...`);
        
        const startTime = performance.now();
        await testFn();
        const endTime = performance.now();
        
        testResults.passed++;
        console.log(`‚úÖ ${name} - –ü–†–û–ô–î–ï–ù (${(endTime - startTime).toFixed(2)}ms)`);
        
    } catch (error) {
        testResults.failed++;
        testResults.errors.push({
            test: name,
            error: error.message,
            stack: error.stack
        });
        
        console.error(`‚ùå ${name} - –ù–ï –ü–†–û–ô–î–ï–ù:`, error.message);
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, TEST_CONFIG.DELAY_BETWEEN_TESTS));
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
 */
function logTestSection(title) {
    console.log('\n' + '='.repeat(40));
    console.log(`üîç ${title}`);
    console.log('='.repeat(40));
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–µ–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
 */
function logTestSubsection(title) {
    console.log(`\nüìã ${title}`);
    console.log('-'.repeat(20));
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setTimeout(runAllTests, 2000);
    });
} else {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setTimeout(runAllTests, 2000);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
window.runAllTests = runAllTests;
window.TEST_CONFIG = TEST_CONFIG;

console.log('üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ShiftLog –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('‚ö° –¢–µ—Å—Ç—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã');
console.log('üîß –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: runAllTests()'); 